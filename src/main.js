/**
 * Module : main.js
 * RÃ´le   : point dâ€™entrÃ©e applicatif â€” orchestre la logique entre UI et Storage.
 *
 * ðŸ“˜ Documentation :
 * https://github.com/Byakoren/TaskForge/blob/main/docs/modules/main.md
 *
 * Ce module gÃ¨re le cycle de vie complet de lâ€™application :
 * - initialisation (chargement et normalisation des tÃ¢ches)
 * - synchronisation du rendu et de la persistance
 * - gestion des interactions via les callbacks du module UI
 */

import { initUI, render, setLoading } from "./ui.js";
import { loadTasks, saveTasks } from "./storage.js";

// Ã‰tat principal de l'application : liste des tÃ¢ches en mÃ©moire
let tasks = [];

/**
 * Initialisation de l'application :
 * - affiche un Ã©tat de chargement
 * - charge les donnÃ©es locales
 * - normalise et trie les tÃ¢ches
 * - dÃ©clenche le premier rendu
 */
function boot() {
    setLoading(true);
    tasks = (loadTasks() || []).map(normalizeTask).sort(sortByCreatedDesc);
    render(tasks);
    setLoading(false);
}

/**
 * Normalise la structure d'une tÃ¢che pour garantir la cohÃ©rence du modÃ¨le.
 * @param {Object} t - DonnÃ©e brute chargÃ©e depuis le storage.
 * @returns {Object} TÃ¢che normalisÃ©e.
 */
function normalizeTask(t) {
    return {
        id: t.id,
        title: t.title,
        done: !!t.done,
        status: t.status || (t.done ? "done" : "todo"),
        createdAt: t.createdAt || new Date().toISOString(),
    };
}

/**
 * Trie les tÃ¢ches par date de crÃ©ation (ordre dÃ©croissant).
 */
function sortByCreatedDesc(a, b) {
    return new Date(b.createdAt) - new Date(a.createdAt);
}

/**
 * Persiste les tÃ¢ches en localStorage et dÃ©clenche un nouveau rendu.
 */
function persistAndRender() {
    saveTasks(tasks);
    render(tasks);
}

/**
 * Ajoute une nouvelle tÃ¢che Ã  la liste.
 * @param {string} title - Texte saisi par lâ€™utilisateur.
 */
function addTask(title) {
    const now = new Date().toISOString();
    tasks = [
        {
            id: crypto.randomUUID(),
            title: title.trim(),
            done: false,
            status: "todo",
            createdAt: now,
        },
        ...tasks,
    ];
    persistAndRender();
}

/**
 * Inverse lâ€™Ã©tat dâ€™une tÃ¢che (terminÃ©e / Ã  faire).
 * Met aussi Ã  jour le statut textuel ("todo" / "done").
 * @param {string} id - Identifiant de la tÃ¢che.
 */
function toggleTask(id) {
    tasks = tasks.map((t) =>
        t.id === id
            ? {
                  ...t,
                  done: !t.done,
                  status: !t.done
                      ? "done"
                      : t.status === "done"
                      ? "todo"
                      : t.status,
              }
            : t
    );
    persistAndRender();
}

/**
 * DÃ©place une tÃ¢che vers un autre Ã©tat (todo / doing / done).
 * Si lâ€™Ã©tat final est "done", on force le boolÃ©en `done` Ã  true.
 * @param {string} id - Identifiant de la tÃ¢che.
 * @param {string} toStatus - Nouvel Ã©tat cible.
 */
function moveTask(id, toStatus) {
    tasks = tasks.map((t) =>
        t.id === id
            ? { ...t, status: toStatus, done: toStatus === "done" ? true : t.done }
            : t
    );
    persistAndRender();
}

/**
 * Renomme une tÃ¢che existante.
 * @param {string} id - Identifiant de la tÃ¢che.
 * @param {string} newTitle - Nouveau titre saisi.
 */
function renameTask(id, newTitle) {
    tasks = tasks.map((t) =>
        t.id === id ? { ...t, title: newTitle } : t
    );
    persistAndRender();
}

/**
 * Supprime une tÃ¢che par son identifiant.
 * @param {string} id - Identifiant de la tÃ¢che.
 */
function deleteTask(id) {
    tasks = tasks.filter((t) => t.id !== id);
    persistAndRender();
}

// Initialisation des callbacks UI â†’ relie les actions de lâ€™interface Ã  la logique applicative
initUI({
    onAdd: addTask,
    onToggle: toggleTask,
    onMove: moveTask,
    onRename: renameTask,
    onDelete: deleteTask,
});

// DÃ©marrage de lâ€™application
boot();
